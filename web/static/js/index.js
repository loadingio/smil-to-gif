// Generated by LiveScript 1.3.1
var show;
(function(){
  var guess, uriRetype, pngIendFix, i8a, arraybuffer, datauri, url, ldimg;
  guess = function(obj){
    var format, that, type;
    format = !obj
      ? null
      : (that = obj.format)
        ? that
        : typeof obj === 'string'
          ? /^blob:/.exec(obj)
            ? 'bloburl'
            : /^data:/.exec(obj) ? 'datauri' : 'url'
          : obj instanceof Blob
            ? 'blob'
            : obj instanceof ArrayBuffer
              ? 'arraybuffer'
              : obj instanceof Uint8Array ? 'i8a' : void 8;
    return type = !obj
      ? null
      : (that = obj.type)
        ? that
        : typeof obj === 'string'
          ? /^blob:/.exec(obj)
            ? null
            : (that = /^data:(.+?)(;base64)?,/.exec(obj)) ? that[1] : null
          : obj instanceof Blob
            ? obj.type
            : obj instanceof ArrayBuffer
              ? null
              : obj instanceof Uint8Array ? null : void 8;
  };
  uriRetype = function(obj, opt){
    return new Promise(function(res, rej){
      var img;
      if (obj.type === opt.type) {
        return res(obj);
      }
      img = new Image();
      img.onerror = function(){
        return rej(new Error("uri-retype failed"));
      };
      img.onload = function(){
        var ref$, w, h, canvas, ctx, e;
        try {
          ref$ = [opt.width || img.width, opt.height || img.height], w = ref$[0], h = ref$[1];
          canvas = document.createElement("canvas");
          canvas.width = w;
          canvas.height = h;
          ctx = canvas.getContext('2d');
          ctx.clearRect(0, 0, w, h);
          ctx.fillStyle = 'rgba(255,255,255,0)';
          ctx.fillRect(0, 0, w, h);
          ctx.drawImage(img, 0, 0, img.width, img.height, (w - img.width) / 2, (h - img.height) / 2, img.width, img.height);
          return res({
            data: canvas.toDataURL(opt.type, opt.quality),
            type: opt.type,
            format: 'datauri'
          });
        } catch (e$) {
          e = e$;
          return rej(e);
        }
      };
      return img.src = obj.data || obj;
    });
  };
  pngIendFix = function(a8){
    a8[a8.length - 4] = 0xae;
    a8[a8.length - 3] = 0x42;
    a8[a8.length - 2] = 0x60;
    a8[a8.length - 1] = 0x82;
    return a8;
  };
  i8a = arraybuffer = {
    toBloburl: function(obj, opt){
      opt == null && (opt = {});
      return i8a.toBlob(obj, opt).then(function(r){
        return {
          data: URL.createObjectURL(r.data),
          type: obj.type,
          format: 'bloburl'
        };
      });
    },
    toBlob: function(obj, opt){
      opt == null && (opt = {});
      return new Promise(function(res, rej){
        var ret, buf;
        ret = {
          type: obj.type || opt.type,
          format: 'blob'
        };
        ret.data = obj.type === 'image/svg+xml'
          ? (buf = obj.format === 'arraybuffer'
            ? new Uint8Array(obj.data)
            : obj.data, new Blob([String.fromCharCode.apply(null, buf)], {
            type: obj.type
          }))
          : new Blob([obj.data], {
            type: opt.type
          });
        return res(ret);
      });
    },
    toDatauri: function(){}
  };
  datauri = {
    retype: function(obj, opt){
      opt == null && (opt = {});
      return Promise.resolve().then(function(){
        return opt.type && obj.type !== opt.type ? uriRetype(obj, opt) : obj;
      });
    },
    split: function(data){
      var ref$, head, body, ret, type;
      ref$ = data.split(','), head = ref$[0], body = ref$[1];
      ret = /data:(.+?)(;base64)?$/.exec(head);
      type = ret ? ret[1] : null;
      return /base64/.exec(head)
        ? {
          type: type,
          body: atob(body)
        }
        : {
          type: type,
          body: decodeURIComponent(body)
        };
    },
    toBloburl: function(obj, opt){
      opt == null && (opt = {});
      return datauri.retype(obj, opt).then(function(obj){
        return datauri.toBlob(obj, opt).then(function(r){
          return {
            data: URL.createObjectURL(r.data),
            type: obj.type,
            format: 'bloburl'
          };
        });
      });
    },
    toBlob: function(obj, opt){
      opt == null && (opt = {});
      return datauri.retype(obj, opt).then(function(obj){
        if (obj.type === 'image/svg+xml') {
          return {
            data: new Blob([datauri.split(obj.data).body], {
              type: obj.type
            }),
            type: obj.type,
            format: 'blob'
          };
        } else {
          return datauri.toI8a(obj, opt).then(function(r){
            return i8a.toBlob(r, opt);
          });
        }
      });
    },
    toArraybuffer: function(obj, opt){
      return datauri.retype(obj, opt).then(function(obj){
        var ref$, type, body, byteString, ab, ia, i$, to$, i;
        ref$ = datauri.split(obj.data), type = ref$.type, body = ref$.body;
        byteString = body;
        ab = new ArrayBuffer(byteString.length);
        ia = new Uint8Array(ab);
        for (i$ = 0, to$ = byteString.length; i$ < to$; ++i$) {
          i = i$;
          ia[i] = byteString.charCodeAt(i);
        }
        return {
          data: ab,
          type: obj.type || type,
          format: 'arraybuffer'
        };
      });
    },
    toI8a: function(obj, opt){
      return datauri.retype(obj, opt).then(function(obj){
        var bin, len, len32, a8, a32, ref$, i, j, i$, tailLen;
        bin = datauri.split(obj.data).body;
        len = bin.length;
        len32 = len >> 2;
        a8 = new Uint8Array(len);
        a32 = new Uint32Array(a8.buffer, 0, len32);
        ref$ = [0, 0], i = ref$[0], j = ref$[1];
        for (i$ = 0; i$ < len32; ++i$) {
          i = i$;
          a32[i] = bin.charCodeAt(j++) | bin.charCodeAt(j++) << 8 | bin.charCodeAt(j++) << 16 | bin.charCodeAt(j++) << 24;
        }
        tailLen = len & 3;
        for (i$ = tailLen; i$ > 0; --i$) {
          i = i$;
          a8[j] = bin.charCodeAt(j);
          j++;
        }
        return {
          data: a8,
          type: obj.type,
          format: 'i8a'
        };
      });
    }
  };
  url = {
    toBloburl: function(src, opt){
      opt == null && (opt = {});
      return url.toBlob(src, opt).then(function(r){
        return {
          data: URL.createObjectURL(r.data),
          type: r.type,
          format: 'bloburl'
        };
      });
    },
    toBlob: function(src, opt){
      opt == null && (opt = {});
      return url.toDatauri(src, opt).then(function(r){
        return datauri.toBlob(r, opt);
      });
    },
    toArraybuffer: function(src, opt){
      opt == null && (opt = {});
      return url.toDatauri(src, opt).then(function(r){
        return datauri.toArraybuffer(r, opt);
      });
    },
    toI8a: function(src, opt){
      opt == null && (opt = {});
      return url.toDatauri(src, opt).then(function(r){
        return datauri.toI8a(r, opt);
      });
    },
    toDatauri: function(src, opt){
      opt == null && (opt = {});
      return new Promise(function(res, rej){
        var r;
        r = new XMLHttpRequest();
        r.open('GET', src, true);
        r.responseType = 'blob';
        r.onload = function(){
          var fr;
          fr = new FileReader();
          fr.onerror = function(it){
            return rej(new Error(it));
          };
          fr.onload = function(){
            var ret;
            ret = {
              data: fr.result,
              type: r.response.type,
              format: 'datauri'
            };
            if (r.response.type !== opt.type) {
              return datauri.retype(ret, opt).then(function(it){
                return res(it);
              });
            } else {
              return res(ret);
            }
          };
          return fr.readAsDataURL(r.response);
        };
        return r.send();
      });
    }
  };
  ldimg = {
    url: url,
    datauri: datauri,
    i8a: i8a,
    arraybuffer: arraybuffer
  };
  if (typeof window != 'undefined' && window !== null) {
    return window.ldimg = ldimg;
  }
})();
show = function(obj, root, name){
  return new Promise(function(res, rej){
    var div, nameSpan, sizeSpan, img;
    div = ld$.create({
      name: 'div',
      className: ['p-2', 'd-inline-block', 'm-2', 'text-center', 'shadow-sm']
    });
    nameSpan = ld$.create({
      name: 'div',
      text: name + "(" + obj.type + ")"
    });
    sizeSpan = ld$.create({
      name: 'div',
      text: Math.round(10 * (obj.data.length || obj.data.byteLength) / 1024) / 10 + "KB"
    });
    img = new Image();
    img.onerror = function(){
      return rej(new Error("show img fail"));
    };
    img.onload = function(){
      return res();
    };
    div.appendChild(nameSpan);
    div.appendChild(sizeSpan);
    div.appendChild(img);
    root.appendChild(div);
    if (obj.format === 'i8a') {
      return ldimg.i8a.toBloburl(obj, {}).then(function(r){
        return img.src = r.data;
      });
    } else if (obj.format === 'arraybuffer') {
      return ldimg.arraybuffer.toBloburl(obj, {}).then(function(r){
        return img.src = r.data;
      });
    } else {
      return img.src = obj.data;
    }
  });
};
['svg', 'png', 'jpg', 'gif'].map(function(postfix){
  var name, container;
  name = "/assets/img/sample." + postfix;
  container = document.querySelector("#block-" + postfix);
  return ldimg.url.toI8a(name, {}).then(function(it){
    return show(it, container, "i8a");
  }).then(function(){
    return ldimg.url.toArraybuffer(name);
  }).then(function(it){
    return show(it, container, "arraybuffer");
  }).then(function(){
    return ldimg.url.toDatauri(name, {});
  }).then(function(it){
    return show(it, container, "datauri");
  }).then(function(){
    return ldimg.url.toBloburl(name, {});
  }).then(function(it){
    return show(it, container, "bloburl");
  });
});
['png', 'jpg', 'webp'].map(function(postfix){
  var name, type, container;
  name = "/assets/img/sample.svg";
  type = "image/" + postfix;
  container = document.querySelector("#block-svg-" + postfix);
  return ldimg.url.toI8a(name, {
    type: type
  }).then(function(it){
    return show(it, container, "i8a");
  }).then(function(){
    return ldimg.url.toArraybuffer(name, {
      type: type
    });
  }).then(function(it){
    return show(it, container, "arraybuffer");
  }).then(function(){
    return ldimg.url.toDatauri(name, {
      type: type
    });
  }).then(function(it){
    return show(it, container, "datauri");
  }).then(function(){
    return ldimg.url.toBloburl(name, {
      type: type
    });
  }).then(function(it){
    return show(it, container, "bloburl");
  });
});